// <auto-generated />
using System;
using Infrasctructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrasctructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230728160639_Inicial")]
    partial class Inicial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Domain.AlumnoTransporte", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DiaId")
                        .HasColumnType("int");

                    b.Property<int>("DireccionId")
                        .HasColumnType("int");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("RutaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DiaId");

                    b.HasIndex("DireccionId");

                    b.HasIndex("RutaId");

                    b.ToTable("AlumnosTransporte");
                });

            modelBuilder.Entity("Domain.AplicaDescuento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DescuentoId")
                        .HasColumnType("int");

                    b.Property<byte>("Estado")
                        .HasColumnType("tinyint unsigned");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal?>("Porcentaje")
                        .HasColumnType("DECIMAL(5,2)");

                    b.Property<int>("RubroId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DescuentoId");

                    b.HasIndex("RubroId");

                    b.ToTable("DescuentosAplicados");
                });

            modelBuilder.Entity("Domain.AreaAcademica", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(70)
                        .HasColumnType("varchar(70)");

                    b.Property<bool?>("Estado")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("AreasAcademicas");
                });

            modelBuilder.Entity("Domain.AutorizacionRetiro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("FechaRetiro")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Motivo")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("PersonaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonaId");

                    b.ToTable("AutorizacionesRetiro");
                });

            modelBuilder.Entity("Domain.Banco", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Nombre")
                        .HasMaxLength(70)
                        .HasColumnType("VARCHAR");

                    b.HasKey("Id");

                    b.ToTable("Bancos");
                });

            modelBuilder.Entity("Domain.BotonPago", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Descripcion")
                        .HasColumnType("longtext");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("BotonesPago");
                });

            modelBuilder.Entity("Domain.BotonPagoSucursal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BotonPagoId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("SucursalId")
                        .HasColumnType("int");

                    b.Property<string>("TokenCorriente")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("TokenVarios")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("VARCHAR");

                    b.HasKey("Id");

                    b.HasIndex("BotonPagoId");

                    b.HasIndex("SucursalId");

                    b.ToTable("BotonesPagoSucursal");
                });

            modelBuilder.Entity("Domain.Calificacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Justificacion")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("MatriculaId")
                        .HasColumnType("int");

                    b.Property<string>("Observacion")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<int>("SubHabilidadId")
                        .HasColumnType("int");

                    b.Property<string>("Valor")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<int>("ValorCalificacionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MatriculaId");

                    b.HasIndex("SubHabilidadId");

                    b.HasIndex("ValorCalificacionId");

                    b.ToTable("Calificaciones");
                });

            modelBuilder.Entity("Domain.CicloEscolar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Estado")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("FechaFin")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("NumeroPeriodos")
                        .HasColumnType("int");

                    b.Property<int>("SucursalId")
                        .HasColumnType("int");

                    b.Property<int>("TipoPeriodoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SucursalId");

                    b.HasIndex("TipoPeriodoId");

                    b.ToTable("CiclosEscolares");
                });

            modelBuilder.Entity("Domain.CuentaSucursal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BancoId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Estado")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NumeroCuenta")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("VARCHAR");

                    b.Property<int>("SucursalId")
                        .HasColumnType("int");

                    b.Property<int>("TipoCuentaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BancoId");

                    b.HasIndex("SucursalId");

                    b.HasIndex("TipoCuentaId");

                    b.ToTable("CuentaSucursals");
                });

            modelBuilder.Entity("Domain.Descuento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(70)
                        .HasColumnType("varchar(70)");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Descuentos");
                });

            modelBuilder.Entity("Domain.DescuentoMatricula", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AplicaDescuentoId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("MatriculaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AplicaDescuentoId");

                    b.HasIndex("MatriculaId");

                    b.ToTable("DescuentosMatricula");
                });

            modelBuilder.Entity("Domain.DetalleRuta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Barrio")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<byte>("Orden")
                        .HasColumnType("tinyint unsigned");

                    b.Property<int?>("Parroquia")
                        .HasColumnType("int");

                    b.Property<int>("RutaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RutaId");

                    b.ToTable("DetallesRuta");
                });

            modelBuilder.Entity("Domain.Dia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Nombre")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Dias");
                });

            modelBuilder.Entity("Domain.Direccion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CallePrincipal")
                        .HasMaxLength(70)
                        .HasColumnType("varchar(70)");

                    b.Property<string>("CalleSecundaria")
                        .HasMaxLength(70)
                        .HasColumnType("varchar(70)");

                    b.Property<int>("Canton")
                        .HasColumnType("int");

                    b.Property<string>("CodigoPostal")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Contacto")
                        .HasMaxLength(70)
                        .HasColumnType("varchar(70)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Latitud")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Longitud")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Numero")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<int>("Parroquia")
                        .HasColumnType("int");

                    b.Property<int>("PersonaId")
                        .HasColumnType("int");

                    b.Property<short>("Provincia")
                        .HasColumnType("smallint");

                    b.Property<string>("Referencia")
                        .HasMaxLength(70)
                        .HasColumnType("varchar(70)");

                    b.Property<string>("Telefono")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<int>("TipoDireccionId")
                        .HasColumnType("int");

                    b.Property<string>("linkGoogleMaps")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("PersonaId");

                    b.HasIndex("TipoDireccionId");

                    b.ToTable("Direcciones");
                });

            modelBuilder.Entity("Domain.Documento", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Estado")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("VARCHAR");

                    b.Property<int>("SucursalId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SucursalId");

                    b.ToTable("Documentos");
                });

            modelBuilder.Entity("Domain.EstadoCuota", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("EstadosCuota");
                });

            modelBuilder.Entity("Domain.EstadoMatricula", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("MatriculaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MatriculaId");

                    b.ToTable("EstadosMatricula");
                });

            modelBuilder.Entity("Domain.EstadoPago", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("VARCHAR");

                    b.HasKey("Id");

                    b.ToTable("EstadosPago");
                });

            modelBuilder.Entity("Domain.FichaMedica", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Alergias")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("ApellidosMedico")
                        .HasMaxLength(70)
                        .HasColumnType("varchar(70)");

                    b.Property<bool>("AutorizaAntiinflamatorioAnalgesico")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("CelularMedico")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DireccionMedico")
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("MatriculaId")
                        .HasColumnType("int");

                    b.Property<string>("NombresMedico")
                        .HasMaxLength(70)
                        .HasColumnType("varchar(70)");

                    b.Property<string>("NotasImportanteSalud")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("ReferenciaDireccionMedico")
                        .HasMaxLength(70)
                        .HasColumnType("varchar(70)");

                    b.Property<string>("RestriccionesAlimenticias")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("TelefonoMedico")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("MatriculaId");

                    b.ToTable("FichasMedicas");
                });

            modelBuilder.Entity("Domain.FichaObservacionMedica", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Especificacion")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("FichaMedicaId")
                        .HasColumnType("int");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ObservacionMedicaId")
                        .HasColumnType("int");

                    b.Property<bool?>("Respuesta")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("FichaMedicaId");

                    b.HasIndex("ObservacionMedicaId");

                    b.ToTable("FichasObservacionesMedicas");
                });

            modelBuilder.Entity("Domain.Habilidad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<bool?>("Estado")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal?>("Porcentaje")
                        .HasColumnType("DECIMAL(5,2)");

                    b.HasKey("Id");

                    b.ToTable("Habilidades");
                });

            modelBuilder.Entity("Domain.HistorialMedico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Alarmas")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Diagnostico")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("FichaMedicaId")
                        .HasColumnType("int");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("Oxigenacion")
                        .HasColumnType("DECIMAL(4,2)");

                    b.Property<decimal>("Peso")
                        .HasColumnType("DECIMAL(6,2)");

                    b.Property<decimal>("Presion")
                        .HasColumnType("DECIMAL(4,2)");

                    b.Property<string>("Sintomas")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<byte>("Talla")
                        .HasColumnType("tinyint unsigned");

                    b.Property<decimal>("Temperatura")
                        .HasColumnType("DECIMAL(4,2)");

                    b.HasKey("Id");

                    b.HasIndex("FichaMedicaId");

                    b.ToTable("HistorialesMedicos");
                });

            modelBuilder.Entity("Domain.JustificaNoSeguro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Estado")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("IdentificacionRepresentante")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Justificacion")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("NombreRepresentante")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("TelefonoRepresentante")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("VARCHAR");

                    b.HasKey("Id");

                    b.ToTable("JustificaNoSeguro");
                });

            modelBuilder.Entity("Domain.Matricula", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CicloEscolarId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("EstadoMatriculaId")
                        .HasColumnType("int");

                    b.Property<string>("Foto")
                        .HasColumnType("longtext");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Nemonico")
                        .HasColumnType("varchar(1)");

                    b.Property<int>("NivelEscolarId")
                        .HasColumnType("int");

                    b.Property<int>("PersonaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CicloEscolarId");

                    b.HasIndex("NivelEscolarId");

                    b.HasIndex("PersonaId");

                    b.ToTable("Matriculas");
                });

            modelBuilder.Entity("Domain.NivelArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AreaAcademicaId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("NivelEscolarId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AreaAcademicaId");

                    b.HasIndex("NivelEscolarId");

                    b.ToTable("NivelArea");
                });

            modelBuilder.Entity("Domain.NivelEscolar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<byte>("Orden")
                        .HasColumnType("tinyint unsigned");

                    b.HasKey("Id");

                    b.ToTable("NivelesEscolares");
                });

            modelBuilder.Entity("Domain.ObligacionPendiente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("Abono")
                        .HasColumnType("DECIMAL(8,2)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("Cuota")
                        .HasColumnType("DECIMAL(3,1)");

                    b.Property<decimal>("Descuento")
                        .HasColumnType("DECIMAL(8,2)");

                    b.Property<int>("EstadoCuotaId")
                        .HasColumnType("int");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("MatriculaId")
                        .HasColumnType("int");

                    b.Property<decimal>("PorcentajeDescuento")
                        .HasColumnType("DECIMAL(5,2)");

                    b.Property<int?>("RegistroPagosId")
                        .HasColumnType("int");

                    b.Property<int>("RubroId")
                        .HasColumnType("int");

                    b.Property<decimal>("Saldo")
                        .HasColumnType("DECIMAL(8,2)");

                    b.Property<int?>("ServicioId")
                        .HasColumnType("int");

                    b.Property<decimal>("Valor")
                        .HasColumnType("DECIMAL(8,2)");

                    b.Property<decimal>("ValorFinal")
                        .HasColumnType("DECIMAL(8,2)");

                    b.HasKey("Id");

                    b.HasIndex("EstadoCuotaId");

                    b.HasIndex("MatriculaId");

                    b.HasIndex("RegistroPagosId");

                    b.HasIndex("RubroId");

                    b.HasIndex("ServicioId");

                    b.ToTable("ObligacionesPendientes");
                });

            modelBuilder.Entity("Domain.ObservacionMedica", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<bool?>("Estado")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("ObservacionesMedicas");
                });

            modelBuilder.Entity("Domain.Paralelo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<short?>("Asistente")
                        .HasColumnType("smallint");

                    b.Property<int>("CicloEscolarId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Nemonico")
                        .HasColumnType("varchar(1)");

                    b.Property<int>("NivelEscolarId")
                        .HasColumnType("int");

                    b.Property<short?>("Tutor")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("CicloEscolarId");

                    b.HasIndex("NivelEscolarId");

                    b.ToTable("Paralelos");
                });

            modelBuilder.Entity("Domain.Persona", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Apellidos")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("VARCHAR");

                    b.Property<bool?>("AutorizadoRecibir")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("AutorizadoRetirar")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Cargo")
                        .HasMaxLength(70)
                        .HasColumnType("VARCHAR");

                    b.Property<bool?>("ContactoEmergencia")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("EmailPrincipal")
                        .HasMaxLength(70)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("EmailSecundario")
                        .HasMaxLength(70)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Identificacion")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LugarTrabajo")
                        .HasMaxLength(70)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Nombres")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Profesion")
                        .HasMaxLength(70)
                        .HasColumnType("VARCHAR");

                    b.Property<bool>("Representante")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("SucursalId")
                        .HasColumnType("int");

                    b.Property<string>("TelefonoMovil")
                        .HasMaxLength(10)
                        .HasColumnType("VARCHAR");

                    b.Property<int?>("TipoEstudianteId")
                        .HasColumnType("int");

                    b.Property<int>("TipoIdentificacionId")
                        .HasColumnType("int");

                    b.Property<string>("UsuarioId")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.HasKey("Id");

                    b.HasIndex("SucursalId");

                    b.HasIndex("TipoEstudianteId");

                    b.HasIndex("TipoIdentificacionId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Personas");
                });

            modelBuilder.Entity("Domain.Plan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AreaAcademicaId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(70)
                        .HasColumnType("varchar(70)");

                    b.Property<bool?>("Estado")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("FechaFin")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("HabilidadId")
                        .HasColumnType("int");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("NivelAreaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AreaAcademicaId");

                    b.HasIndex("HabilidadId");

                    b.HasIndex("NivelAreaId");

                    b.ToTable("Planes");
                });

            modelBuilder.Entity("Domain.Profesion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(70)
                        .HasColumnType("varchar(70)");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Profesiones");
                });

            modelBuilder.Entity("Domain.Receta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Dosis")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("HistorialMedicoId")
                        .HasColumnType("int");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Medicamento")
                        .HasMaxLength(70)
                        .HasColumnType("varchar(70)");

                    b.HasKey("Id");

                    b.HasIndex("HistorialMedicoId");

                    b.ToTable("Recetas");
                });

            modelBuilder.Entity("Domain.RegistroPagos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CuentaSucursalId")
                        .HasColumnType("int");

                    b.Property<string>("DescripcionTarjeta")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("EstadoPagoId")
                        .HasColumnType("int");

                    b.Property<string>("EstadoTarjeta")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("FechaTransaccion")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NombrePropietarioTarjeta")
                        .HasMaxLength(70)
                        .HasColumnType("varchar(70)");

                    b.Property<string>("NumeroReferencia")
                        .HasMaxLength(70)
                        .HasColumnType("varchar(70)");

                    b.Property<string>("ObservacionTarjeta")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("TipoPagoId")
                        .HasColumnType("int");

                    b.Property<string>("TokenTxTarjeta")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<decimal>("Valor")
                        .HasColumnType("DECIMAL(8,2)");

                    b.Property<string>("codTx")
                        .HasMaxLength(70)
                        .HasColumnType("varchar(70)");

                    b.Property<string>("idTxTarjeta")
                        .HasMaxLength(70)
                        .HasColumnType("varchar(70)");

                    b.HasKey("Id");

                    b.HasIndex("CuentaSucursalId");

                    b.HasIndex("EstadoPagoId");

                    b.HasIndex("TipoPagoId");

                    b.ToTable("RegistrosPagos");
                });

            modelBuilder.Entity("Domain.Relacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Persona2Id")
                        .HasColumnType("int");

                    b.Property<int>("PersonaId")
                        .HasColumnType("int");

                    b.Property<int>("TipoRelacionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Persona2Id");

                    b.HasIndex("PersonaId");

                    b.HasIndex("TipoRelacionId");

                    b.ToTable("Relaciones");
                });

            modelBuilder.Entity("Domain.RolTarea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("RolUsuarioId")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("TareaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RolUsuarioId");

                    b.HasIndex("TareaId");

                    b.ToTable("RolesTarea");
                });

            modelBuilder.Entity("Domain.Rubro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CicloEscolarId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Costo")
                        .HasColumnType("DECIMAL(8,2)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<short>("TipoRubroId")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("CicloEscolarId");

                    b.HasIndex("TipoRubroId");

                    b.ToTable("Rubros");
                });

            modelBuilder.Entity("Domain.Ruta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("TransportistaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TransportistaId");

                    b.ToTable("Rutas");
                });

            modelBuilder.Entity("Domain.Servicio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal?>("CostoPeriodo")
                        .HasColumnType("DECIMAL(8,2)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(70)
                        .HasColumnType("varchar(70)");

                    b.Property<bool?>("Estado")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Link")
                        .HasColumnType("longtext");

                    b.Property<string>("Nombre")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<int?>("Periodos")
                        .HasColumnType("int");

                    b.Property<int>("SucursalId")
                        .HasColumnType("int");

                    b.Property<int>("TipoServicioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SucursalId");

                    b.HasIndex("TipoServicioId");

                    b.ToTable("Servicios");
                });

            modelBuilder.Entity("Domain.SubHabilidad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<bool?>("Estado")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("HabilidadId")
                        .HasColumnType("int");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<byte>("Orden")
                        .HasColumnType("tinyint unsigned");

                    b.Property<decimal>("Porcentaje")
                        .HasColumnType("DECIMAL(4,2)");

                    b.HasKey("Id");

                    b.HasIndex("HabilidadId");

                    b.ToTable("SubHabilidades");
                });

            modelBuilder.Entity("Domain.Sucursal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Direccion")
                        .HasMaxLength(70)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Email")
                        .HasMaxLength(70)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("EmailFacturas")
                        .HasMaxLength(70)
                        .HasColumnType("varchar(70)");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Nombre")
                        .HasMaxLength(70)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("RUC")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("RazonSocial")
                        .HasMaxLength(70)
                        .HasColumnType("varchar(70)");

                    b.Property<string>("Telefono")
                        .HasMaxLength(15)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("color1")
                        .HasColumnType("longtext");

                    b.Property<string>("color2")
                        .HasColumnType("longtext");

                    b.Property<string>("color3")
                        .HasColumnType("longtext");

                    b.Property<string>("color4")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Sucursales");
                });

            modelBuilder.Entity("Domain.Tarea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(70)
                        .HasColumnType("varchar(70)");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Tareas");
                });

            modelBuilder.Entity("Domain.TipoCalificacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("TiposCalificacion");
                });

            modelBuilder.Entity("Domain.TipoCuenta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(30)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("tipoCuentas");
                });

            modelBuilder.Entity("Domain.TipoDireccion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("TiposDireccion");
                });

            modelBuilder.Entity("Domain.TipoEstudiante", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("TiposEstudiante");
                });

            modelBuilder.Entity("Domain.TipoIdentificacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("TiposIdentificacion");
                });

            modelBuilder.Entity("Domain.TipoPago", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("TiposPago");
                });

            modelBuilder.Entity("Domain.TipoPeriodo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("TiposPeriodo");
                });

            modelBuilder.Entity("Domain.TipoRelacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("TiposRelacion");
                });

            modelBuilder.Entity("Domain.TipoRubro", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("VARCHAR");

                    b.HasKey("Id");

                    b.ToTable("TiposRubro");
                });

            modelBuilder.Entity("Domain.TipoServicio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("TiposServicio");
                });

            modelBuilder.Entity("Domain.Transportista", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Apellidos")
                        .HasMaxLength(70)
                        .HasColumnType("varchar(70)");

                    b.Property<string>("Cedula")
                        .HasMaxLength(70)
                        .HasColumnType("varchar(70)");

                    b.Property<string>("Celular")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FotoPersona")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("FotoVehiculo")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Nombres")
                        .HasMaxLength(70)
                        .HasColumnType("varchar(70)");

                    b.Property<string>("NumeroLicencia")
                        .HasMaxLength(70)
                        .HasColumnType("varchar(70)");

                    b.Property<string>("NumeroPermisoMunicipal")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("NumeroPlaca")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.HasKey("Id");

                    b.ToTable("Transportistas");
                });

            modelBuilder.Entity("Domain.Usuario", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Apellidos")
                        .HasColumnType("longtext");

                    b.Property<string>("Avatar")
                        .HasColumnType("longtext");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Nombres")
                        .HasColumnType("longtext");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("isActive")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Domain.UsuarioSucursal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("SucursalId")
                        .HasColumnType("int");

                    b.Property<string>("UsuarioId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("SucursalId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("UsuariosSucursal");
                });

            modelBuilder.Entity("Domain.ValorCalificacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Escala")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Significado")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<int>("TipoCalificacionId")
                        .HasColumnType("int");

                    b.Property<string>("Valor")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("TipoCalificacionId");

                    b.ToTable("ValoresCalificacion");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Domain.RolUsuario", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasDiscriminator().HasValue("RolUsuario");
                });

            modelBuilder.Entity("Domain.AlumnoTransporte", b =>
                {
                    b.HasOne("Domain.Dia", "Dia")
                        .WithMany("AlumnoTransporte")
                        .HasForeignKey("DiaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Direccion", "Direccion")
                        .WithMany("AlumnoTransporte")
                        .HasForeignKey("DireccionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Ruta", "Ruta")
                        .WithMany("AlumnoTransporte")
                        .HasForeignKey("RutaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dia");

                    b.Navigation("Direccion");

                    b.Navigation("Ruta");
                });

            modelBuilder.Entity("Domain.AplicaDescuento", b =>
                {
                    b.HasOne("Domain.Descuento", "Descuento")
                        .WithMany("AplicaDescuento")
                        .HasForeignKey("DescuentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Rubro", "Rubro")
                        .WithMany("AplicaDescuento")
                        .HasForeignKey("RubroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Descuento");

                    b.Navigation("Rubro");
                });

            modelBuilder.Entity("Domain.AutorizacionRetiro", b =>
                {
                    b.HasOne("Domain.Persona", "Persona")
                        .WithMany("AutorizacionRetiro")
                        .HasForeignKey("PersonaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("Domain.BotonPagoSucursal", b =>
                {
                    b.HasOne("Domain.BotonPago", "BotonPago")
                        .WithMany("BotonPagoSucursal")
                        .HasForeignKey("BotonPagoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Sucursal", "Sucursal")
                        .WithMany("BotonPagoSucursal")
                        .HasForeignKey("SucursalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BotonPago");

                    b.Navigation("Sucursal");
                });

            modelBuilder.Entity("Domain.Calificacion", b =>
                {
                    b.HasOne("Domain.Matricula", "Matricula")
                        .WithMany("Calificacion")
                        .HasForeignKey("MatriculaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.SubHabilidad", "SubHabilidad")
                        .WithMany("Calificacion")
                        .HasForeignKey("SubHabilidadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.ValorCalificacion", "ValorCalificacion")
                        .WithMany("Calificacion")
                        .HasForeignKey("ValorCalificacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Matricula");

                    b.Navigation("SubHabilidad");

                    b.Navigation("ValorCalificacion");
                });

            modelBuilder.Entity("Domain.CicloEscolar", b =>
                {
                    b.HasOne("Domain.Sucursal", "Sucursal")
                        .WithMany("CicloEscolar")
                        .HasForeignKey("SucursalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.TipoPeriodo", "TipoPeriodo")
                        .WithMany("CicloEscolar")
                        .HasForeignKey("TipoPeriodoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sucursal");

                    b.Navigation("TipoPeriodo");
                });

            modelBuilder.Entity("Domain.CuentaSucursal", b =>
                {
                    b.HasOne("Domain.Banco", "Banco")
                        .WithMany("CuentaSucursal")
                        .HasForeignKey("BancoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Sucursal", "Sucursal")
                        .WithMany("CuentaSucursal")
                        .HasForeignKey("SucursalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.TipoCuenta", "TipoCuenta")
                        .WithMany("CuentaSucursal")
                        .HasForeignKey("TipoCuentaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Banco");

                    b.Navigation("Sucursal");

                    b.Navigation("TipoCuenta");
                });

            modelBuilder.Entity("Domain.DescuentoMatricula", b =>
                {
                    b.HasOne("Domain.AplicaDescuento", "AplicaDescuento")
                        .WithMany()
                        .HasForeignKey("AplicaDescuentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Matricula", "Matricula")
                        .WithMany("DescuentoMatricula")
                        .HasForeignKey("MatriculaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AplicaDescuento");

                    b.Navigation("Matricula");
                });

            modelBuilder.Entity("Domain.DetalleRuta", b =>
                {
                    b.HasOne("Domain.Ruta", "Ruta")
                        .WithMany("DetalleRuta")
                        .HasForeignKey("RutaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ruta");
                });

            modelBuilder.Entity("Domain.Direccion", b =>
                {
                    b.HasOne("Domain.Persona", "Persona")
                        .WithMany("Direccion")
                        .HasForeignKey("PersonaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.TipoDireccion", "TipoDireccion")
                        .WithMany("Direccion")
                        .HasForeignKey("TipoDireccionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Persona");

                    b.Navigation("TipoDireccion");
                });

            modelBuilder.Entity("Domain.Documento", b =>
                {
                    b.HasOne("Domain.Sucursal", null)
                        .WithMany("Documento")
                        .HasForeignKey("SucursalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.EstadoMatricula", b =>
                {
                    b.HasOne("Domain.Matricula", "Matricula")
                        .WithMany("EstadoMatricula")
                        .HasForeignKey("MatriculaId");

                    b.Navigation("Matricula");
                });

            modelBuilder.Entity("Domain.FichaMedica", b =>
                {
                    b.HasOne("Domain.Matricula", "Matricula")
                        .WithMany("FichaMedica")
                        .HasForeignKey("MatriculaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Matricula");
                });

            modelBuilder.Entity("Domain.FichaObservacionMedica", b =>
                {
                    b.HasOne("Domain.FichaMedica", "FichaMedica")
                        .WithMany("FichaObservacionMedica")
                        .HasForeignKey("FichaMedicaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.ObservacionMedica", "ObservacionMedica")
                        .WithMany("FichaObservacionMedica")
                        .HasForeignKey("ObservacionMedicaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FichaMedica");

                    b.Navigation("ObservacionMedica");
                });

            modelBuilder.Entity("Domain.HistorialMedico", b =>
                {
                    b.HasOne("Domain.FichaMedica", "FichaMedica")
                        .WithMany("HistorialMedico")
                        .HasForeignKey("FichaMedicaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FichaMedica");
                });

            modelBuilder.Entity("Domain.Matricula", b =>
                {
                    b.HasOne("Domain.CicloEscolar", "CicloEscolar")
                        .WithMany("Matricula")
                        .HasForeignKey("CicloEscolarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.NivelEscolar", "NivelEscolar")
                        .WithMany("Matricula")
                        .HasForeignKey("NivelEscolarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Persona", "Persona")
                        .WithMany("Matricula")
                        .HasForeignKey("PersonaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CicloEscolar");

                    b.Navigation("NivelEscolar");

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("Domain.NivelArea", b =>
                {
                    b.HasOne("Domain.AreaAcademica", "AreaAcademica")
                        .WithMany("NivelArea")
                        .HasForeignKey("AreaAcademicaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.NivelEscolar", "NivelEscolar")
                        .WithMany("NivelArea")
                        .HasForeignKey("NivelEscolarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AreaAcademica");

                    b.Navigation("NivelEscolar");
                });

            modelBuilder.Entity("Domain.ObligacionPendiente", b =>
                {
                    b.HasOne("Domain.EstadoCuota", "EstadoCuota")
                        .WithMany("ObligacionPendiente")
                        .HasForeignKey("EstadoCuotaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Matricula", "Matricula")
                        .WithMany("ObligacionPendiente")
                        .HasForeignKey("MatriculaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.RegistroPagos", "RegistroPagos")
                        .WithMany("ObligacionPendiente")
                        .HasForeignKey("RegistroPagosId");

                    b.HasOne("Domain.Rubro", "Rubro")
                        .WithMany("ObligacionPendiente")
                        .HasForeignKey("RubroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Servicio", "Servicio")
                        .WithMany("ObligacionPendiente")
                        .HasForeignKey("ServicioId");

                    b.Navigation("EstadoCuota");

                    b.Navigation("Matricula");

                    b.Navigation("RegistroPagos");

                    b.Navigation("Rubro");

                    b.Navigation("Servicio");
                });

            modelBuilder.Entity("Domain.Paralelo", b =>
                {
                    b.HasOne("Domain.CicloEscolar", "CicloEscolar")
                        .WithMany()
                        .HasForeignKey("CicloEscolarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.NivelEscolar", "NivelEscolar")
                        .WithMany("Paralelo")
                        .HasForeignKey("NivelEscolarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CicloEscolar");

                    b.Navigation("NivelEscolar");
                });

            modelBuilder.Entity("Domain.Persona", b =>
                {
                    b.HasOne("Domain.Sucursal", "Sucursal")
                        .WithMany("Personas")
                        .HasForeignKey("SucursalId");

                    b.HasOne("Domain.TipoEstudiante", "TipoEstudiante")
                        .WithMany("Persona")
                        .HasForeignKey("TipoEstudianteId");

                    b.HasOne("Domain.TipoIdentificacion", "TipoIdentificacion")
                        .WithMany("Persona")
                        .HasForeignKey("TipoIdentificacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Usuario", "Usuario")
                        .WithMany("Persona")
                        .HasForeignKey("UsuarioId");

                    b.Navigation("Sucursal");

                    b.Navigation("TipoEstudiante");

                    b.Navigation("TipoIdentificacion");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Domain.Plan", b =>
                {
                    b.HasOne("Domain.AreaAcademica", "AreaAcademica")
                        .WithMany()
                        .HasForeignKey("AreaAcademicaId");

                    b.HasOne("Domain.Habilidad", "Habilidad")
                        .WithMany()
                        .HasForeignKey("HabilidadId");

                    b.HasOne("Domain.NivelArea", "NivelArea")
                        .WithMany("Plan")
                        .HasForeignKey("NivelAreaId");

                    b.Navigation("AreaAcademica");

                    b.Navigation("Habilidad");

                    b.Navigation("NivelArea");
                });

            modelBuilder.Entity("Domain.Receta", b =>
                {
                    b.HasOne("Domain.HistorialMedico", "HistorialMedico")
                        .WithMany("Receta")
                        .HasForeignKey("HistorialMedicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HistorialMedico");
                });

            modelBuilder.Entity("Domain.RegistroPagos", b =>
                {
                    b.HasOne("Domain.CuentaSucursal", "CuentaSucursal")
                        .WithMany("RegistroPagos")
                        .HasForeignKey("CuentaSucursalId");

                    b.HasOne("Domain.EstadoPago", "EstadoPago")
                        .WithMany("RegistroPagos")
                        .HasForeignKey("EstadoPagoId");

                    b.HasOne("Domain.TipoPago", "TipoPago")
                        .WithMany("RegistroPagos")
                        .HasForeignKey("TipoPagoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CuentaSucursal");

                    b.Navigation("EstadoPago");

                    b.Navigation("TipoPago");
                });

            modelBuilder.Entity("Domain.Relacion", b =>
                {
                    b.HasOne("Domain.Persona", "Persona2")
                        .WithMany("RelacionPersona2")
                        .HasForeignKey("Persona2Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Persona", "Persona")
                        .WithMany("RelacionPersona")
                        .HasForeignKey("PersonaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.TipoRelacion", "TipoRelacion")
                        .WithMany("Relacion")
                        .HasForeignKey("TipoRelacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Persona");

                    b.Navigation("Persona2");

                    b.Navigation("TipoRelacion");
                });

            modelBuilder.Entity("Domain.RolTarea", b =>
                {
                    b.HasOne("Domain.RolUsuario", "RolUsuario")
                        .WithMany("RolTarea")
                        .HasForeignKey("RolUsuarioId");

                    b.HasOne("Domain.Tarea", "Tarea")
                        .WithMany("RolTarea")
                        .HasForeignKey("TareaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RolUsuario");

                    b.Navigation("Tarea");
                });

            modelBuilder.Entity("Domain.Rubro", b =>
                {
                    b.HasOne("Domain.CicloEscolar", "CicloEscolar")
                        .WithMany("Rubro")
                        .HasForeignKey("CicloEscolarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.TipoRubro", "TipoRubro")
                        .WithMany("Rubro")
                        .HasForeignKey("TipoRubroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CicloEscolar");

                    b.Navigation("TipoRubro");
                });

            modelBuilder.Entity("Domain.Ruta", b =>
                {
                    b.HasOne("Domain.Transportista", "Transportista")
                        .WithMany("Ruta")
                        .HasForeignKey("TransportistaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Transportista");
                });

            modelBuilder.Entity("Domain.Servicio", b =>
                {
                    b.HasOne("Domain.Sucursal", "Sucursal")
                        .WithMany("Servicios")
                        .HasForeignKey("SucursalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.TipoServicio", "TipoServicio")
                        .WithMany("Servicio")
                        .HasForeignKey("TipoServicioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sucursal");

                    b.Navigation("TipoServicio");
                });

            modelBuilder.Entity("Domain.SubHabilidad", b =>
                {
                    b.HasOne("Domain.Habilidad", "Habilidad")
                        .WithMany("SubHabilidad")
                        .HasForeignKey("HabilidadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Habilidad");
                });

            modelBuilder.Entity("Domain.UsuarioSucursal", b =>
                {
                    b.HasOne("Domain.Sucursal", "Sucursal")
                        .WithMany("UsuarioSucursal")
                        .HasForeignKey("SucursalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Usuario", "Usuario")
                        .WithMany("UsuarioSucursal")
                        .HasForeignKey("UsuarioId");

                    b.Navigation("Sucursal");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Domain.ValorCalificacion", b =>
                {
                    b.HasOne("Domain.TipoCalificacion", "TipoCalificacion")
                        .WithMany("ValorCalificacion")
                        .HasForeignKey("TipoCalificacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TipoCalificacion");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Domain.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Domain.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Domain.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.AreaAcademica", b =>
                {
                    b.Navigation("NivelArea");
                });

            modelBuilder.Entity("Domain.Banco", b =>
                {
                    b.Navigation("CuentaSucursal");
                });

            modelBuilder.Entity("Domain.BotonPago", b =>
                {
                    b.Navigation("BotonPagoSucursal");
                });

            modelBuilder.Entity("Domain.CicloEscolar", b =>
                {
                    b.Navigation("Matricula");

                    b.Navigation("Rubro");
                });

            modelBuilder.Entity("Domain.CuentaSucursal", b =>
                {
                    b.Navigation("RegistroPagos");
                });

            modelBuilder.Entity("Domain.Descuento", b =>
                {
                    b.Navigation("AplicaDescuento");
                });

            modelBuilder.Entity("Domain.Dia", b =>
                {
                    b.Navigation("AlumnoTransporte");
                });

            modelBuilder.Entity("Domain.Direccion", b =>
                {
                    b.Navigation("AlumnoTransporte");
                });

            modelBuilder.Entity("Domain.EstadoCuota", b =>
                {
                    b.Navigation("ObligacionPendiente");
                });

            modelBuilder.Entity("Domain.EstadoPago", b =>
                {
                    b.Navigation("RegistroPagos");
                });

            modelBuilder.Entity("Domain.FichaMedica", b =>
                {
                    b.Navigation("FichaObservacionMedica");

                    b.Navigation("HistorialMedico");
                });

            modelBuilder.Entity("Domain.Habilidad", b =>
                {
                    b.Navigation("SubHabilidad");
                });

            modelBuilder.Entity("Domain.HistorialMedico", b =>
                {
                    b.Navigation("Receta");
                });

            modelBuilder.Entity("Domain.Matricula", b =>
                {
                    b.Navigation("Calificacion");

                    b.Navigation("DescuentoMatricula");

                    b.Navigation("EstadoMatricula");

                    b.Navigation("FichaMedica");

                    b.Navigation("ObligacionPendiente");
                });

            modelBuilder.Entity("Domain.NivelArea", b =>
                {
                    b.Navigation("Plan");
                });

            modelBuilder.Entity("Domain.NivelEscolar", b =>
                {
                    b.Navigation("Matricula");

                    b.Navigation("NivelArea");

                    b.Navigation("Paralelo");
                });

            modelBuilder.Entity("Domain.ObservacionMedica", b =>
                {
                    b.Navigation("FichaObservacionMedica");
                });

            modelBuilder.Entity("Domain.Persona", b =>
                {
                    b.Navigation("AutorizacionRetiro");

                    b.Navigation("Direccion");

                    b.Navigation("Matricula");

                    b.Navigation("RelacionPersona");

                    b.Navigation("RelacionPersona2");
                });

            modelBuilder.Entity("Domain.RegistroPagos", b =>
                {
                    b.Navigation("ObligacionPendiente");
                });

            modelBuilder.Entity("Domain.Rubro", b =>
                {
                    b.Navigation("AplicaDescuento");

                    b.Navigation("ObligacionPendiente");
                });

            modelBuilder.Entity("Domain.Ruta", b =>
                {
                    b.Navigation("AlumnoTransporte");

                    b.Navigation("DetalleRuta");
                });

            modelBuilder.Entity("Domain.Servicio", b =>
                {
                    b.Navigation("ObligacionPendiente");
                });

            modelBuilder.Entity("Domain.SubHabilidad", b =>
                {
                    b.Navigation("Calificacion");
                });

            modelBuilder.Entity("Domain.Sucursal", b =>
                {
                    b.Navigation("BotonPagoSucursal");

                    b.Navigation("CicloEscolar");

                    b.Navigation("CuentaSucursal");

                    b.Navigation("Documento");

                    b.Navigation("Personas");

                    b.Navigation("Servicios");

                    b.Navigation("UsuarioSucursal");
                });

            modelBuilder.Entity("Domain.Tarea", b =>
                {
                    b.Navigation("RolTarea");
                });

            modelBuilder.Entity("Domain.TipoCalificacion", b =>
                {
                    b.Navigation("ValorCalificacion");
                });

            modelBuilder.Entity("Domain.TipoCuenta", b =>
                {
                    b.Navigation("CuentaSucursal");
                });

            modelBuilder.Entity("Domain.TipoDireccion", b =>
                {
                    b.Navigation("Direccion");
                });

            modelBuilder.Entity("Domain.TipoEstudiante", b =>
                {
                    b.Navigation("Persona");
                });

            modelBuilder.Entity("Domain.TipoIdentificacion", b =>
                {
                    b.Navigation("Persona");
                });

            modelBuilder.Entity("Domain.TipoPago", b =>
                {
                    b.Navigation("RegistroPagos");
                });

            modelBuilder.Entity("Domain.TipoPeriodo", b =>
                {
                    b.Navigation("CicloEscolar");
                });

            modelBuilder.Entity("Domain.TipoRelacion", b =>
                {
                    b.Navigation("Relacion");
                });

            modelBuilder.Entity("Domain.TipoRubro", b =>
                {
                    b.Navigation("Rubro");
                });

            modelBuilder.Entity("Domain.TipoServicio", b =>
                {
                    b.Navigation("Servicio");
                });

            modelBuilder.Entity("Domain.Transportista", b =>
                {
                    b.Navigation("Ruta");
                });

            modelBuilder.Entity("Domain.Usuario", b =>
                {
                    b.Navigation("Persona");

                    b.Navigation("UsuarioSucursal");
                });

            modelBuilder.Entity("Domain.ValorCalificacion", b =>
                {
                    b.Navigation("Calificacion");
                });

            modelBuilder.Entity("Domain.RolUsuario", b =>
                {
                    b.Navigation("RolTarea");
                });
#pragma warning restore 612, 618
        }
    }
}
